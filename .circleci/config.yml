# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    # branches:
    #   ignore:
    #     - develop
    #     - /feature-.*/

    working_directory: ~/circleci-2_0-RoR-sample

    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.3-node-browsers-legacy
        environment:
          PG_HOST: 127.0.0.1
          RAILS_ENV: test
          RACK_ENV: test
          RAILS_ENV: test
          PG_HOST: localhost
          PG_USER: root
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ''

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    steps:
      - checkout

      # - run: echo ${ENV} > ~/.env

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      # - run:
      #     name: Rubocop
      #     command: bundle exec rubocop --rails -f html -o doc/rubocop.html --fail-level F

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
        
      # wait for docker up complete for db
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load --trace
        environment:
          DATABASE_URL: "postgres://root@localhost:5432/circle_test"

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            
            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results



